{
    "type": "object",
    "properties": {
        "name": {
            "required": true,
            "type": "string"
        },
        "access_token": {
            "type": "string"
        },
        "alt": {
            "type": "string",
            "enum": [
                "json",
                "media",
                "proto"
            ],
            "default": "json"
        },
        "bearer_token": {
            "type": "string"
        },
        "callback": {
            "type": "string"
        },
        "fields": {
            "type": "string"
        },
        "key": {
            "type": "string"
        },
        "oauth_token": {
            "type": "string"
        },
        "pp": {
            "type": "boolean",
            "default": true
        },
        "prettyPrint": {
            "type": "boolean",
            "default": true
        },
        "quotaUser": {
            "type": "string"
        },
        "uploadType": {
            "type": "string"
        },
        "upload_protocol": {
            "type": "string"
        },
        "requestBody": {
            "description": "A span represents a single operation within a trace. Spans can be\nnested to form a trace tree. Often, a trace contains a root span\nthat describes the end-to-end latency, and one or more subspans for\nits sub-operations. A trace can also contain multiple root spans,\nor none at all. Spans do not need to be contiguous&mdash;there may be\ngaps or overlaps between spans in a trace.",
            "properties": {
                "attributes": {
                    "description": "A set of attributes on the span. There is a limit of 32 attributes per\nspan.",
                    "properties": {
                        "attributeMap": {
                            "additionalProperties": {
                                "description": "The allowed types for [VALUE] in a `[KEY]:[VALUE]` attribute.",
                                "properties": {
                                    "boolValue": {
                                        "description": "A Boolean value represented by `true` or `false`.",
                                        "type": "boolean"
                                    },
                                    "intValue": {
                                        "description": "A 64-bit signed integer.",
                                        "format": "int64",
                                        "type": "string"
                                    },
                                    "stringValue": {
                                        "description": "A string up to 256 bytes long.",
                                        "properties": {
                                            "truncatedByteCount": {
                                                "description": "The number of bytes removed from the original string. If this\nvalue is 0, then the string was not shortened.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "value": {
                                                "description": "The shortened string. For example, if the original string was 500\nbytes long and the limit of the string was 128 bytes, then this\nvalue contains the first 128 bytes of the 500-byte string. Note that\ntruncation always happens on the character boundary, to ensure that\ntruncated string is still valid UTF8. In case of multi-byte characters,\nsize of truncated string can be less than truncation limit.",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "description": "The set of attributes. Each attribute's key can be up to 128 bytes\nlong. The value can be a string up to 256 bytes, an integer, or the\nBoolean values `true` and `false`. For example:\n\n    \"/instance_id\": \"my-instance\"\n    \"/http/user_agent\": \"\"\n    \"/http/request_bytes\": 300\n    \"abc.com/myattribute\": true",
                            "type": "object"
                        },
                        "droppedAttributesCount": {
                            "description": "The number of attributes that were discarded. Attributes can be discarded\nbecause their keys are too long or because there are too many attributes.\nIf this value is 0 then all attributes are valid.",
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "type": "object"
                },
                "childSpanCount": {
                    "description": "An optional number of child spans that were generated while this span\nwas active. If set, allows implementation to detect missing child spans.",
                    "format": "uint32",
                    "type": "integer"
                },
                "displayName": {
                    "description": "A description of the span's operation (up to 128 bytes).\nStackdriver Trace displays the description in the\n{% dynamic print site_values.console_name %}.\nFor example, the display name can be a qualified method name or a file name\nand a line number where the operation is called. A best practice is to use\nthe same display name within an application and at the same call point.\nThis makes it easier to correlate spans in different traces.",
                    "properties": {
                        "truncatedByteCount": {
                            "description": "The number of bytes removed from the original string. If this\nvalue is 0, then the string was not shortened.",
                            "format": "int32",
                            "type": "integer"
                        },
                        "value": {
                            "description": "The shortened string. For example, if the original string was 500\nbytes long and the limit of the string was 128 bytes, then this\nvalue contains the first 128 bytes of the 500-byte string. Note that\ntruncation always happens on the character boundary, to ensure that\ntruncated string is still valid UTF8. In case of multi-byte characters,\nsize of truncated string can be less than truncation limit.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "endTime": {
                    "description": "The end time of the span. On the client side, this is the time kept by\nthe local machine where the span execution ends. On the server side, this\nis the time when the server application handler stops running.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "links": {
                    "description": "A maximum of 128 links are allowed per Span.",
                    "properties": {
                        "droppedLinksCount": {
                            "description": "The number of dropped links after the maximum size was enforced. If\nthis value is 0, then no links were dropped.",
                            "format": "int32",
                            "type": "integer"
                        },
                        "link": {
                            "description": "A collection of links.",
                            "items": {
                                "description": "A pointer from the current span to another span in the same trace or in a\ndifferent trace. For example, this can be used in batching operations,\nwhere a single batch handler processes multiple requests from different\ntraces or when the handler receives a request from a different project.",
                                "properties": {
                                    "attributes": {
                                        "description": "A set of attributes on the link. There is a limit of 32 attributes per\nlink.",
                                        "properties": {
                                            "attributeMap": {
                                                "additionalProperties": {
                                                    "description": "The allowed types for [VALUE] in a `[KEY]:[VALUE]` attribute.",
                                                    "properties": {
                                                        "boolValue": {
                                                            "description": "A Boolean value represented by `true` or `false`.",
                                                            "type": "boolean"
                                                        },
                                                        "intValue": {
                                                            "description": "A 64-bit signed integer.",
                                                            "format": "int64",
                                                            "type": "string"
                                                        },
                                                        "stringValue": {
                                                            "description": "A string up to 256 bytes long.",
                                                            "properties": {
                                                                "truncatedByteCount": {
                                                                    "description": "The number of bytes removed from the original string. If this\nvalue is 0, then the string was not shortened.",
                                                                    "format": "int32",
                                                                    "type": "integer"
                                                                },
                                                                "value": {
                                                                    "description": "The shortened string. For example, if the original string was 500\nbytes long and the limit of the string was 128 bytes, then this\nvalue contains the first 128 bytes of the 500-byte string. Note that\ntruncation always happens on the character boundary, to ensure that\ntruncated string is still valid UTF8. In case of multi-byte characters,\nsize of truncated string can be less than truncation limit.",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "description": "The set of attributes. Each attribute's key can be up to 128 bytes\nlong. The value can be a string up to 256 bytes, an integer, or the\nBoolean values `true` and `false`. For example:\n\n    \"/instance_id\": \"my-instance\"\n    \"/http/user_agent\": \"\"\n    \"/http/request_bytes\": 300\n    \"abc.com/myattribute\": true",
                                                "type": "object"
                                            },
                                            "droppedAttributesCount": {
                                                "description": "The number of attributes that were discarded. Attributes can be discarded\nbecause their keys are too long or because there are too many attributes.\nIf this value is 0 then all attributes are valid.",
                                                "format": "int32",
                                                "type": "integer"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "spanId": {
                                        "description": "`SPAN_ID` identifies a span within a trace.",
                                        "type": "string"
                                    },
                                    "traceId": {
                                        "description": "`TRACE_ID` identifies a trace within a project.",
                                        "type": "string"
                                    },
                                    "type": {
                                        "description": "The relationship of the current span relative to the linked span.",
                                        "enum": [
                                            "TYPE_UNSPECIFIED",
                                            "CHILD_LINKED_SPAN",
                                            "PARENT_LINKED_SPAN"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        }
                    },
                    "type": "object"
                },
                "name": {
                    "description": "The resource name of the span in the following format:\n\n    projects/[PROJECT_ID]traces/[TRACE_ID]/spans/SPAN_ID is a unique identifier for a trace within a project.\n[SPAN_ID] is a unique identifier for a span within a trace,\nassigned when the span is created.",
                    "type": "string"
                },
                "parentSpanId": {
                    "description": "The [SPAN_ID] of this span's parent span. If this is a root span,\nthen this field must be empty.",
                    "type": "string"
                },
                "sameProcessAsParentSpan": {
                    "description": "A highly recommended but not required flag that identifies when a trace\ncrosses a process boundary. True when the parent_span belongs to the\nsame process as the current span.",
                    "type": "boolean"
                },
                "spanId": {
                    "description": "The [SPAN_ID] portion of the span's resource name.",
                    "type": "string"
                },
                "stackTrace": {
                    "description": "Stack trace captured at the start of the span.",
                    "properties": {
                        "stackFrames": {
                            "description": "Stack frames in this stack trace. A maximum of 128 frames are allowed.",
                            "properties": {
                                "droppedFramesCount": {
                                    "description": "The number of stack frames that were dropped because there\nwere too many stack frames.\nIf this value is 0, then no stack frames were dropped.",
                                    "format": "int32",
                                    "type": "integer"
                                },
                                "frame": {
                                    "description": "Stack frames in this call stack.",
                                    "items": {
                                        "description": "Represents a single stack frame in a stack trace.",
                                        "properties": {
                                            "columnNumber": {
                                                "description": "The column number where the function call appears, if available.\nThis is important in JavaScript because of its anonymous functions.",
                                                "format": "int64",
                                                "type": "string"
                                            },
                                            "fileName": {
                                                "description": "The name of the source file where the function call appears (up to 256\nbytes).",
                                                "properties": {
                                                    "truncatedByteCount": {
                                                        "description": "The number of bytes removed from the original string. If this\nvalue is 0, then the string was not shortened.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "value": {
                                                        "description": "The shortened string. For example, if the original string was 500\nbytes long and the limit of the string was 128 bytes, then this\nvalue contains the first 128 bytes of the 500-byte string. Note that\ntruncation always happens on the character boundary, to ensure that\ntruncated string is still valid UTF8. In case of multi-byte characters,\nsize of truncated string can be less than truncation limit.",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "functionName": {
                                                "description": "The fully-qualified name that uniquely identifies the function or\nmethod that is active in this frame (up to 1024 bytes).",
                                                "properties": {
                                                    "truncatedByteCount": {
                                                        "description": "The number of bytes removed from the original string. If this\nvalue is 0, then the string was not shortened.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "value": {
                                                        "description": "The shortened string. For example, if the original string was 500\nbytes long and the limit of the string was 128 bytes, then this\nvalue contains the first 128 bytes of the 500-byte string. Note that\ntruncation always happens on the character boundary, to ensure that\ntruncated string is still valid UTF8. In case of multi-byte characters,\nsize of truncated string can be less than truncation limit.",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "lineNumber": {
                                                "description": "The line number in `file_name` where the function call appears.",
                                                "format": "int64",
                                                "type": "string"
                                            },
                                            "loadModule": {
                                                "description": "The binary module from where the code was loaded.",
                                                "properties": {
                                                    "buildId": {
                                                        "description": "A unique identifier for the module, usually a hash of its\ncontents (up to 128 bytes).",
                                                        "properties": {
                                                            "truncatedByteCount": {
                                                                "description": "The number of bytes removed from the original string. If this\nvalue is 0, then the string was not shortened.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            },
                                                            "value": {
                                                                "description": "The shortened string. For example, if the original string was 500\nbytes long and the limit of the string was 128 bytes, then this\nvalue contains the first 128 bytes of the 500-byte string. Note that\ntruncation always happens on the character boundary, to ensure that\ntruncated string is still valid UTF8. In case of multi-byte characters,\nsize of truncated string can be less than truncation limit.",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "module": {
                                                        "description": "For example: main binary, kernel modules, and dynamic libraries\nsuch as libc.so, sharedlib.so (up to 256 bytes).",
                                                        "properties": {
                                                            "truncatedByteCount": {
                                                                "description": "The number of bytes removed from the original string. If this\nvalue is 0, then the string was not shortened.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            },
                                                            "value": {
                                                                "description": "The shortened string. For example, if the original string was 500\nbytes long and the limit of the string was 128 bytes, then this\nvalue contains the first 128 bytes of the 500-byte string. Note that\ntruncation always happens on the character boundary, to ensure that\ntruncated string is still valid UTF8. In case of multi-byte characters,\nsize of truncated string can be less than truncation limit.",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "originalFunctionName": {
                                                "description": "An un-mangled function name, if `function_name` is\n[mangled](http://www.avabodh.com/cxxin/namemangling.html). The name can\nbe fully-qualified (up to 1024 bytes).",
                                                "properties": {
                                                    "truncatedByteCount": {
                                                        "description": "The number of bytes removed from the original string. If this\nvalue is 0, then the string was not shortened.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "value": {
                                                        "description": "The shortened string. For example, if the original string was 500\nbytes long and the limit of the string was 128 bytes, then this\nvalue contains the first 128 bytes of the 500-byte string. Note that\ntruncation always happens on the character boundary, to ensure that\ntruncated string is still valid UTF8. In case of multi-byte characters,\nsize of truncated string can be less than truncation limit.",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "sourceVersion": {
                                                "description": "The version of the deployed source code (up to 128 bytes).",
                                                "properties": {
                                                    "truncatedByteCount": {
                                                        "description": "The number of bytes removed from the original string. If this\nvalue is 0, then the string was not shortened.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "value": {
                                                        "description": "The shortened string. For example, if the original string was 500\nbytes long and the limit of the string was 128 bytes, then this\nvalue contains the first 128 bytes of the 500-byte string. Note that\ntruncation always happens on the character boundary, to ensure that\ntruncated string is still valid UTF8. In case of multi-byte characters,\nsize of truncated string can be less than truncation limit.",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "type": "array"
                                }
                            },
                            "type": "object"
                        },
                        "stackTraceHashId": {
                            "description": "The hash ID is used to conserve network bandwidth for duplicate\nstack traces within a single trace.\n\nOften multiple spans will have identical stack traces.\nThe first occurrence of a stack trace should contain both the\n`stackFrame` content and a value in `stackTraceHashId`.\n\nSubsequent spans within the same request can refer\nto that stack trace by only setting `stackTraceHashId`.",
                            "format": "uint64",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "startTime": {
                    "description": "The start time of the span. On the client side, this is the time kept by\nthe local machine where the span execution starts. On the server side, this\nis the time when the server's application handler starts running.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "status": {
                    "description": "An optional final status for this span.",
                    "properties": {
                        "code": {
                            "description": "The status code, which should be an enum value of google.rpc.Code.",
                            "format": "int32",
                            "type": "integer"
                        },
                        "details": {
                            "description": "A list of messages that carry the error details.  There will be a\ncommon set of message types for APIs to use.",
                            "items": {
                                "additionalProperties": {
                                    "description": "Properties of the object. Contains field @type with type URL."
                                },
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "message": {
                            "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\ngoogle.rpc.Status.details field, or localized by the client.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "timeEvents": {
                    "description": "The included time events. There can be up to 32 annotations and 128 network\nevents per span.",
                    "properties": {
                        "droppedAnnotationsCount": {
                            "description": "The number of dropped annotations in all the included time events.\nIf the value is 0, then no annotations were dropped.",
                            "format": "int32",
                            "type": "integer"
                        },
                        "droppedNetworkEventsCount": {
                            "description": "The number of dropped network events in all the included time events.\nIf the value is 0, then no network events were dropped.",
                            "format": "int32",
                            "type": "integer"
                        },
                        "timeEvent": {
                            "description": "A collection of `TimeEvent`s.",
                            "items": {
                                "description": "A time-stamped annotation or network event in the Span.",
                                "properties": {
                                    "annotation": {
                                        "description": "One or more key:value pairs.",
                                        "properties": {
                                            "attributes": {
                                                "description": "A set of attributes on the annotation. There is a limit of 4 attributes\nper Annotation.",
                                                "properties": {
                                                    "attributeMap": {
                                                        "additionalProperties": {
                                                            "description": "The allowed types for [VALUE] in a `[KEY]:[VALUE]` attribute.",
                                                            "properties": {
                                                                "boolValue": {
                                                                    "description": "A Boolean value represented by `true` or `false`.",
                                                                    "type": "boolean"
                                                                },
                                                                "intValue": {
                                                                    "description": "A 64-bit signed integer.",
                                                                    "format": "int64",
                                                                    "type": "string"
                                                                },
                                                                "stringValue": {
                                                                    "description": "A string up to 256 bytes long.",
                                                                    "properties": {
                                                                        "truncatedByteCount": {
                                                                            "description": "The number of bytes removed from the original string. If this\nvalue is 0, then the string was not shortened.",
                                                                            "format": "int32",
                                                                            "type": "integer"
                                                                        },
                                                                        "value": {
                                                                            "description": "The shortened string. For example, if the original string was 500\nbytes long and the limit of the string was 128 bytes, then this\nvalue contains the first 128 bytes of the 500-byte string. Note that\ntruncation always happens on the character boundary, to ensure that\ntruncated string is still valid UTF8. In case of multi-byte characters,\nsize of truncated string can be less than truncation limit.",
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "description": "The set of attributes. Each attribute's key can be up to 128 bytes\nlong. The value can be a string up to 256 bytes, an integer, or the\nBoolean values `true` and `false`. For example:\n\n    \"/instance_id\": \"my-instance\"\n    \"/http/user_agent\": \"\"\n    \"/http/request_bytes\": 300\n    \"abc.com/myattribute\": true",
                                                        "type": "object"
                                                    },
                                                    "droppedAttributesCount": {
                                                        "description": "The number of attributes that were discarded. Attributes can be discarded\nbecause their keys are too long or because there are too many attributes.\nIf this value is 0 then all attributes are valid.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "description": {
                                                "description": "A user-supplied message describing the event. The maximum length for\nthe description is 256 bytes.",
                                                "properties": {
                                                    "truncatedByteCount": {
                                                        "description": "The number of bytes removed from the original string. If this\nvalue is 0, then the string was not shortened.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "value": {
                                                        "description": "The shortened string. For example, if the original string was 500\nbytes long and the limit of the string was 128 bytes, then this\nvalue contains the first 128 bytes of the 500-byte string. Note that\ntruncation always happens on the character boundary, to ensure that\ntruncated string is still valid UTF8. In case of multi-byte characters,\nsize of truncated string can be less than truncation limit.",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "networkEvent": {
                                        "description": "An event describing an RPC message sent/received on the network.",
                                        "properties": {
                                            "messageId": {
                                                "description": "An identifier for the message, which must be unique in this span.",
                                                "format": "uint64",
                                                "type": "string"
                                            },
                                            "messageSize": {
                                                "description": "The number of bytes sent or received.",
                                                "format": "uint64",
                                                "type": "string"
                                            },
                                            "time": {
                                                "description": "For sent messages, this is the time at which the first bit was sent.\nFor received messages, this is the time at which the last bit was\nreceived.",
                                                "format": "google-datetime",
                                                "type": "string"
                                            },
                                            "type": {
                                                "description": "Type of NetworkEvent. Indicates whether the RPC message was sent or\nreceived.",
                                                "enum": [
                                                    "TYPE_UNSPECIFIED",
                                                    "SENT",
                                                    "RECV"
                                                ],
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "time": {
                                        "description": "The timestamp indicating the time the event occurred.",
                                        "format": "google-datetime",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        }
    }
}